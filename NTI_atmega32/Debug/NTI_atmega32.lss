
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  00800062  00800062  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a9a  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e25  00000000  00000000  00002596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001008  00000000  00000000  000033bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007fc  00000000  00000000  000043c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100e  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001364  00000000  00000000  00005bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00006f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_2>
   c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_10>
  2c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_11>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_12>
  34:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_13>
  38:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_14>
  3c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_15>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 34       	cpi	r26, 0x40	; 64
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 03 	jmp	0x72c	; 0x72c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
}

int main()
{
   
	TWI_SetBitRate(100000);
  92:	60 ea       	ldi	r22, 0xA0	; 160
  94:	76 e8       	ldi	r23, 0x86	; 134
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 81 01 	call	0x302	; 0x302 <TWI_SetBitRate>
		
	
    while (1) 
    {
		TWI_Start();
  9e:	0e 94 9d 01 	call	0x33a	; 0x33a <TWI_Start>
		TWI_SlaveSelect(0x0f , WRITE_OP);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	0e 94 ae 01 	call	0x35c	; 0x35c <TWI_SlaveSelect>
		TWI_SendByte(d);
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	0e 94 be 01 	call	0x37c	; 0x37c <TWI_SendByte>
		TWI_Stop();
  b2:	0e 94 c8 01 	call	0x390	; 0x390 <TWI_Stop>
		
		d++;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3e>
  d0:	00 00       	nop
  d2:	e5 cf       	rjmp	.-54     	; 0x9e <main+0xc>

000000d4 <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
  f6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_ADC_Callback>
  fa:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_ADC_Callback+0x1>
  fe:	30 97       	sbiw	r30, 0x00	; 0
 100:	09 f0       	breq	.+2      	; 0x104 <__vector_16+0x30>
	{
		GP_ADC_Callback();
 102:	09 95       	icall
	}
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	EXTI0_callback();
 148:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <EXTI0_callback>
 14c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <EXTI0_callback+0x1>
 150:	09 95       	icall
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_2>:

void __vector_2(void)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	EXTI1_callback();
 196:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXTI1_callback>
 19a:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXTI1_callback+0x1>
 19e:	09 95       	icall
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_3>:

void __vector_3(void)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	EXTI2_callback();
 1e4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXTI2_callback>
 1e8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXTI2_callback+0x1>
 1ec:	09 95       	icall
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
 232:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 236:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 23a:	09 95       	icall
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_10>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
 280:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <T0_OC_CallBackFun>
 284:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <T0_OC_CallBackFun+0x1>
 288:	30 97       	sbiw	r30, 0x00	; 0
 28a:	09 f0       	breq	.+2      	; 0x28e <__vector_10+0x30>
 28c:	09 95       	icall
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
 2d2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <T0_OVF_CallBackFun>
 2d6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <T0_OVF_CallBackFun+0x1>
 2da:	30 97       	sbiw	r30, 0x00	; 0
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
 2de:	09 95       	icall
    }
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <TWI_SetBitRate>:
	/* Busy wait until TWINT is set */
	while (!CHECK_BIT(TWCR, 7));
	
	return READ_TWI_EVENT_STATE();
	
}
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	81 b9       	out	0x01, r24	; 1
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	74 e2       	ldi	r23, 0x24	; 36
 30e:	84 ef       	ldi	r24, 0xF4	; 244
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__udivmodsi4>
 316:	ca 01       	movw	r24, r20
 318:	b9 01       	movw	r22, r18
 31a:	60 51       	subi	r22, 0x10	; 16
 31c:	71 09       	sbc	r23, r1
 31e:	81 09       	sbc	r24, r1
 320:	91 09       	sbc	r25, r1
 322:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__floatunsisf>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	5d e3       	ldi	r21, 0x3D	; 61
 32e:	0e 94 df 02 	call	0x5be	; 0x5be <__mulsf3>
 332:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
 336:	60 b9       	out	0x00, r22	; 0
 338:	08 95       	ret

0000033a <TWI_Start>:
 33a:	86 b7       	in	r24, 0x36	; 54
 33c:	84 6a       	ori	r24, 0xA4	; 164
 33e:	86 bf       	out	0x36, r24	; 54
 340:	06 b6       	in	r0, 0x36	; 54
 342:	07 fe       	sbrs	r0, 7
 344:	fd cf       	rjmp	.-6      	; 0x340 <TWI_Start+0x6>
 346:	81 b1       	in	r24, 0x01	; 1
 348:	88 7f       	andi	r24, 0xF8	; 248
 34a:	88 30       	cpi	r24, 0x08	; 8
 34c:	29 f4       	brne	.+10     	; 0x358 <TWI_Start+0x1e>
 34e:	86 b7       	in	r24, 0x36	; 54
 350:	84 68       	ori	r24, 0x84	; 132
 352:	86 bf       	out	0x36, r24	; 54
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	08 95       	ret
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret

0000035c <TWI_SlaveSelect>:
 35c:	90 e8       	ldi	r25, 0x80	; 128
 35e:	69 9f       	mul	r22, r25
 360:	b0 01       	movw	r22, r0
 362:	11 24       	eor	r1, r1
 364:	8f 77       	andi	r24, 0x7F	; 127
 366:	68 2b       	or	r22, r24
 368:	63 b9       	out	0x03, r22	; 3
 36a:	86 b7       	in	r24, 0x36	; 54
 36c:	84 68       	ori	r24, 0x84	; 132
 36e:	86 bf       	out	0x36, r24	; 54
 370:	06 b6       	in	r0, 0x36	; 54
 372:	07 fe       	sbrs	r0, 7
 374:	fd cf       	rjmp	.-6      	; 0x370 <TWI_SlaveSelect+0x14>
 376:	81 b1       	in	r24, 0x01	; 1
 378:	88 7f       	andi	r24, 0xF8	; 248
 37a:	08 95       	ret

0000037c <TWI_SendByte>:
 37c:	83 b9       	out	0x03, r24	; 3
 37e:	86 b7       	in	r24, 0x36	; 54
 380:	84 68       	ori	r24, 0x84	; 132
 382:	86 bf       	out	0x36, r24	; 54
 384:	06 b6       	in	r0, 0x36	; 54
 386:	07 fe       	sbrs	r0, 7
 388:	fd cf       	rjmp	.-6      	; 0x384 <TWI_SendByte+0x8>
 38a:	81 b1       	in	r24, 0x01	; 1
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	08 95       	ret

00000390 <TWI_Stop>:
 *   @brief     - send stop condition
 *   @retval    - None
 */
void TWI_Stop(void)
{
	TWCR |= (1 << 7) | (1<<2) | (1<<4);
 390:	86 b7       	in	r24, 0x36	; 54
 392:	84 69       	ori	r24, 0x94	; 148
 394:	86 bf       	out	0x36, r24	; 54
	/* Busy wait until STOP bit is set */
	while (CHECK_BIT(TWCR, 4));
 396:	06 b6       	in	r0, 0x36	; 54
 398:	04 fc       	sbrc	r0, 4
 39a:	fd cf       	rjmp	.-6      	; 0x396 <TWI_Stop+0x6>
	
}
 39c:	08 95       	ret

0000039e <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
 3c0:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <UART_RXC_CallBack>
 3c4:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <UART_RXC_CallBack+0x1>
 3c8:	30 97       	sbiw	r30, 0x00	; 0
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_13+0x30>
    {
        UART_RXC_CallBack();
 3cc:	09 95       	icall
    }
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
 412:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <UART_UDRE_CallBack>
 416:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <UART_UDRE_CallBack+0x1>
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
    {
        UART_UDRE_CallBack();
 41e:	09 95       	icall
    }
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
 464:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <UART_TXC_CallBack>
 468:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <UART_TXC_CallBack+0x1>
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	09 f0       	breq	.+2      	; 0x472 <__vector_15+0x30>
    {
        UART_TXC_CallBack();
 470:	09 95       	icall
    }
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__fixunssfsi>:
 494:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x28>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fixunssfsi+0x30>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	b0 f0       	brcs	.+44     	; 0x4d2 <__fixunssfsi+0x3e>
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__fixunssfsi+0x4c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x24>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x14>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fixunssfsi+0x4c>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	91 f0       	breq	.+36     	; 0x4e0 <__fixunssfsi+0x4c>
 4bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_zero>
 4c0:	b1 e0       	ldi	r27, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x4c>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x34>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x42>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x5c>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

000005b0 <__fp_zero>:
 5b0:	e8 94       	clt

000005b2 <__fp_szero>:
 5b2:	bb 27       	eor	r27, r27
 5b4:	66 27       	eor	r22, r22
 5b6:	77 27       	eor	r23, r23
 5b8:	cb 01       	movw	r24, r22
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__mulsf3>:
 5be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulsf3x>
 5c2:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_round>
 5c6:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_pscA>
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__mulsf3+0x1c>
 5cc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_pscB>
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__mulsf3+0x1c>
 5d2:	95 23       	and	r25, r21
 5d4:	11 f0       	breq	.+4      	; 0x5da <__mulsf3+0x1c>
 5d6:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_inf>
 5da:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_nan>
 5de:	11 24       	eor	r1, r1
 5e0:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>

000005e4 <__mulsf3x>:
 5e4:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_split3>
 5e8:	70 f3       	brcs	.-36     	; 0x5c6 <__mulsf3+0x8>

000005ea <__mulsf3_pse>:
 5ea:	95 9f       	mul	r25, r21
 5ec:	c1 f3       	breq	.-16     	; 0x5de <__mulsf3+0x20>
 5ee:	95 0f       	add	r25, r21
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	55 1f       	adc	r21, r21
 5f4:	62 9f       	mul	r22, r18
 5f6:	f0 01       	movw	r30, r0
 5f8:	72 9f       	mul	r23, r18
 5fa:	bb 27       	eor	r27, r27
 5fc:	f0 0d       	add	r31, r0
 5fe:	b1 1d       	adc	r27, r1
 600:	63 9f       	mul	r22, r19
 602:	aa 27       	eor	r26, r26
 604:	f0 0d       	add	r31, r0
 606:	b1 1d       	adc	r27, r1
 608:	aa 1f       	adc	r26, r26
 60a:	64 9f       	mul	r22, r20
 60c:	66 27       	eor	r22, r22
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	66 1f       	adc	r22, r22
 614:	82 9f       	mul	r24, r18
 616:	22 27       	eor	r18, r18
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	62 1f       	adc	r22, r18
 61e:	73 9f       	mul	r23, r19
 620:	b0 0d       	add	r27, r0
 622:	a1 1d       	adc	r26, r1
 624:	62 1f       	adc	r22, r18
 626:	83 9f       	mul	r24, r19
 628:	a0 0d       	add	r26, r0
 62a:	61 1d       	adc	r22, r1
 62c:	22 1f       	adc	r18, r18
 62e:	74 9f       	mul	r23, r20
 630:	33 27       	eor	r19, r19
 632:	a0 0d       	add	r26, r0
 634:	61 1d       	adc	r22, r1
 636:	23 1f       	adc	r18, r19
 638:	84 9f       	mul	r24, r20
 63a:	60 0d       	add	r22, r0
 63c:	21 1d       	adc	r18, r1
 63e:	82 2f       	mov	r24, r18
 640:	76 2f       	mov	r23, r22
 642:	6a 2f       	mov	r22, r26
 644:	11 24       	eor	r1, r1
 646:	9f 57       	subi	r25, 0x7F	; 127
 648:	50 40       	sbci	r21, 0x00	; 0
 64a:	9a f0       	brmi	.+38     	; 0x672 <__mulsf3_pse+0x88>
 64c:	f1 f0       	breq	.+60     	; 0x68a <__mulsf3_pse+0xa0>
 64e:	88 23       	and	r24, r24
 650:	4a f0       	brmi	.+18     	; 0x664 <__mulsf3_pse+0x7a>
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	bb 1f       	adc	r27, r27
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	91 50       	subi	r25, 0x01	; 1
 660:	50 40       	sbci	r21, 0x00	; 0
 662:	a9 f7       	brne	.-22     	; 0x64e <__mulsf3_pse+0x64>
 664:	9e 3f       	cpi	r25, 0xFE	; 254
 666:	51 05       	cpc	r21, r1
 668:	80 f0       	brcs	.+32     	; 0x68a <__mulsf3_pse+0xa0>
 66a:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_inf>
 66e:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>
 672:	5f 3f       	cpi	r21, 0xFF	; 255
 674:	e4 f3       	brlt	.-8      	; 0x66e <__mulsf3_pse+0x84>
 676:	98 3e       	cpi	r25, 0xE8	; 232
 678:	d4 f3       	brlt	.-12     	; 0x66e <__mulsf3_pse+0x84>
 67a:	86 95       	lsr	r24
 67c:	77 95       	ror	r23
 67e:	67 95       	ror	r22
 680:	b7 95       	ror	r27
 682:	f7 95       	ror	r31
 684:	e7 95       	ror	r30
 686:	9f 5f       	subi	r25, 0xFF	; 255
 688:	c1 f7       	brne	.-16     	; 0x67a <__mulsf3_pse+0x90>
 68a:	fe 2b       	or	r31, r30
 68c:	88 0f       	add	r24, r24
 68e:	91 1d       	adc	r25, r1
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__fp_inf>:
 698:	97 f9       	bld	r25, 7
 69a:	9f 67       	ori	r25, 0x7F	; 127
 69c:	80 e8       	ldi	r24, 0x80	; 128
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	08 95       	ret

000006a4 <__fp_nan>:
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	80 ec       	ldi	r24, 0xC0	; 192
 6a8:	08 95       	ret

000006aa <__fp_pscA>:
 6aa:	00 24       	eor	r0, r0
 6ac:	0a 94       	dec	r0
 6ae:	16 16       	cp	r1, r22
 6b0:	17 06       	cpc	r1, r23
 6b2:	18 06       	cpc	r1, r24
 6b4:	09 06       	cpc	r0, r25
 6b6:	08 95       	ret

000006b8 <__fp_pscB>:
 6b8:	00 24       	eor	r0, r0
 6ba:	0a 94       	dec	r0
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	14 06       	cpc	r1, r20
 6c2:	05 06       	cpc	r0, r21
 6c4:	08 95       	ret

000006c6 <__fp_round>:
 6c6:	09 2e       	mov	r0, r25
 6c8:	03 94       	inc	r0
 6ca:	00 0c       	add	r0, r0
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0xc>
 6ce:	88 23       	and	r24, r24
 6d0:	52 f0       	brmi	.+20     	; 0x6e6 <__fp_round+0x20>
 6d2:	bb 0f       	add	r27, r27
 6d4:	40 f4       	brcc	.+16     	; 0x6e6 <__fp_round+0x20>
 6d6:	bf 2b       	or	r27, r31
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0x18>
 6da:	60 ff       	sbrs	r22, 0
 6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__fp_round+0x20>
 6de:	6f 5f       	subi	r22, 0xFF	; 255
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	08 95       	ret

000006e8 <__udivmodsi4>:
 6e8:	a1 e2       	ldi	r26, 0x21	; 33
 6ea:	1a 2e       	mov	r1, r26
 6ec:	aa 1b       	sub	r26, r26
 6ee:	bb 1b       	sub	r27, r27
 6f0:	fd 01       	movw	r30, r26
 6f2:	0d c0       	rjmp	.+26     	; 0x70e <__udivmodsi4_ep>

000006f4 <__udivmodsi4_loop>:
 6f4:	aa 1f       	adc	r26, r26
 6f6:	bb 1f       	adc	r27, r27
 6f8:	ee 1f       	adc	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	a2 17       	cp	r26, r18
 6fe:	b3 07       	cpc	r27, r19
 700:	e4 07       	cpc	r30, r20
 702:	f5 07       	cpc	r31, r21
 704:	20 f0       	brcs	.+8      	; 0x70e <__udivmodsi4_ep>
 706:	a2 1b       	sub	r26, r18
 708:	b3 0b       	sbc	r27, r19
 70a:	e4 0b       	sbc	r30, r20
 70c:	f5 0b       	sbc	r31, r21

0000070e <__udivmodsi4_ep>:
 70e:	66 1f       	adc	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	1a 94       	dec	r1
 718:	69 f7       	brne	.-38     	; 0x6f4 <__udivmodsi4_loop>
 71a:	60 95       	com	r22
 71c:	70 95       	com	r23
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	bd 01       	movw	r22, r26
 728:	cf 01       	movw	r24, r30
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
