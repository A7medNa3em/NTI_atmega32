
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000852  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  00800072  00800072  000008f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002337  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f8  00000000  00000000  00002ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001500  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  000055f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b5  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001af6  00000000  00000000  00007199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00008c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_1>
   8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_2>
   c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_10>
  2c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_11>
  30:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_12>
  34:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_13>
  38:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_14>
  3c:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_15>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 35       	cpi	r26, 0x50	; 80
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 27 04 	jmp	0x84e	; 0x84e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_viInit>:

#include "led.h"
#include "led_cfg.h"

void led_viInit(void)
{
  92:	cf 93       	push	r28
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
  94:	c0 e0       	ldi	r28, 0x00	; 0
  96:	0e c0       	rjmp	.+28     	; 0xb4 <led_viInit+0x22>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
  98:	ec 2f       	mov	r30, r28
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	ef 59       	subi	r30, 0x9F	; 159
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	62 81       	ldd	r22, Z+2	; 0x02
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	0e 94 b2 00 	call	0x164	; 0x164 <dio_vidConfigChannel>
#include "led_cfg.h"

void led_viInit(void)
{
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b8:	c8 17       	cp	r28, r24
  ba:	70 f3       	brcs	.-36     	; 0x98 <led_viInit+0x6>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
	}
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:
}

int main()
{
   
	TWI_Master_voidInit(100000);
  c0:	60 ea       	ldi	r22, 0xA0	; 160
  c2:	76 e8       	ldi	r23, 0x86	; 134
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 0d 02 	call	0x41a	; 0x41a <TWI_Master_voidInit>
	led_viInit();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <led_viInit>
		
	
    while (1) 
    {
		if(TWI_Master_enuStartCond() ==EVENT_OK_STATE)
  d0:	0e 94 2c 02 	call	0x458	; 0x458 <TWI_Master_enuStartCond>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	71 f4       	brne	.+28     	; 0xf4 <main+0x34>
		if(TWI_Master_enuSelectSlave(10,WRITE_OP) == SLA_W_SENT_WITH_ACK_STATE)
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	0e 94 3a 02 	call	0x474	; 0x474 <TWI_Master_enuSelectSlave>
  e0:	88 31       	cpi	r24, 0x18	; 24
  e2:	41 f4       	brne	.+16     	; 0xf4 <main+0x34>
		if (TWI_Master_enuSendByte(d)== DATA_SENT_WITH_ACK_STATE)
  e4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <d>
  e8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TWI_Master_enuSendByte>
  ec:	88 32       	cpi	r24, 0x28	; 40
  ee:	11 f4       	brne	.+4      	; 0xf4 <main+0x34>
		TWI_Master_voidStopCond();
  f0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TWI_Master_voidStopCond>
		d++;
  f4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <d>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x44>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x4e>
 10e:	00 00       	nop
 110:	df cf       	rjmp	.-66     	; 0xd0 <main+0x10>

00000112 <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
 134:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <GP_ADC_Callback>
 138:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <GP_ADC_Callback+0x1>
 13c:	30 97       	sbiw	r30, 0x00	; 0
 13e:	09 f0       	breq	.+2      	; 0x142 <__vector_16+0x30>
	{
		GP_ADC_Callback();
 140:	09 95       	icall
	}
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	bf 91       	pop	r27
 148:	af 91       	pop	r26
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	7f 91       	pop	r23
 150:	6f 91       	pop	r22
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	01 f1       	breq	.+64     	; 0x1a8 <dio_vidConfigChannel+0x44>
 168:	30 f0       	brcs	.+12     	; 0x176 <dio_vidConfigChannel+0x12>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	b1 f1       	breq	.+108    	; 0x1da <dio_vidConfigChannel+0x76>
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	09 f4       	brne	.+2      	; 0x174 <dio_vidConfigChannel+0x10>
 172:	4c c0       	rjmp	.+152    	; 0x20c <dio_vidConfigChannel+0xa8>
 174:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 176:	41 30       	cpi	r20, 0x01	; 1
 178:	59 f4       	brne	.+22     	; 0x190 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DDRA,channel);
 17a:	2a b3       	in	r18, 0x1a	; 26
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <dio_vidConfigChannel+0x22>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <dio_vidConfigChannel+0x1e>
 18a:	82 2b       	or	r24, r18
 18c:	8a bb       	out	0x1a, r24	; 26
 18e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRA,channel);
 190:	2a b3       	in	r18, 0x1a	; 26
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <dio_vidConfigChannel+0x38>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <dio_vidConfigChannel+0x34>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	8a bb       	out	0x1a, r24	; 26
 1a6:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	59 f4       	brne	.+22     	; 0x1c2 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DDRB,channel);
 1ac:	27 b3       	in	r18, 0x17	; 23
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dio_vidConfigChannel+0x54>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dio_vidConfigChannel+0x50>
 1bc:	82 2b       	or	r24, r18
 1be:	87 bb       	out	0x17, r24	; 23
 1c0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRB,channel);
 1c2:	27 b3       	in	r18, 0x17	; 23
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <dio_vidConfigChannel+0x6a>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <dio_vidConfigChannel+0x66>
 1d2:	80 95       	com	r24
 1d4:	82 23       	and	r24, r18
 1d6:	87 bb       	out	0x17, r24	; 23
 1d8:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	59 f4       	brne	.+22     	; 0x1f4 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DDRC,channel);
 1de:	24 b3       	in	r18, 0x14	; 20
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <dio_vidConfigChannel+0x86>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <dio_vidConfigChannel+0x82>
 1ee:	82 2b       	or	r24, r18
 1f0:	84 bb       	out	0x14, r24	; 20
 1f2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRC,channel);
 1f4:	24 b3       	in	r18, 0x14	; 20
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <dio_vidConfigChannel+0x9c>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <dio_vidConfigChannel+0x98>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	84 bb       	out	0x14, r24	; 20
 20a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	59 f4       	brne	.+22     	; 0x226 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DDRD,channel);
 210:	21 b3       	in	r18, 0x11	; 17
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <dio_vidConfigChannel+0xb8>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <dio_vidConfigChannel+0xb4>
 220:	82 2b       	or	r24, r18
 222:	81 bb       	out	0x11, r24	; 17
 224:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRD,channel);
 226:	21 b3       	in	r18, 0x11	; 17
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <dio_vidConfigChannel+0xce>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <dio_vidConfigChannel+0xca>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	81 bb       	out	0x11, r24	; 17
 23c:	08 95       	ret

0000023e <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	EXTI0_callback();
 260:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXTI0_callback>
 264:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXTI0_callback+0x1>
 268:	09 95       	icall
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_2>:

void __vector_2(void)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	EXTI1_callback();
 2ae:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXTI1_callback>
 2b2:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXTI1_callback+0x1>
 2b6:	09 95       	icall
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_3>:

void __vector_3(void)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	EXTI2_callback();
 2fc:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXTI2_callback>
 300:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXTI2_callback+0x1>
 304:	09 95       	icall
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
 34a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 34e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 352:	09 95       	icall
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_10>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <T0_OC_CallBackFun>
 39c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <T0_OC_CallBackFun+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <__vector_10+0x30>
 3a4:	09 95       	icall
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
 3ea:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <T0_OVF_CallBackFun>
 3ee:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <T0_OVF_CallBackFun+0x1>
 3f2:	30 97       	sbiw	r30, 0x00	; 0
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
 3f6:	09 95       	icall
    }
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <TWI_Master_voidInit>:
	/* Busy wait until TWINT is set */
	while (!CHECK_BIT(TWCR, 7));
	
	return READ_TWI_EVENT_STATE();
	
}
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	81 b9       	out	0x01, r24	; 1
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	74 e2       	ldi	r23, 0x24	; 36
 426:	84 ef       	ldi	r24, 0xF4	; 244
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodsi4>
 42e:	ca 01       	movw	r24, r20
 430:	b9 01       	movw	r22, r18
 432:	60 51       	subi	r22, 0x10	; 16
 434:	71 09       	sbc	r23, r1
 436:	81 09       	sbc	r24, r1
 438:	91 09       	sbc	r25, r1
 43a:	0e 94 0a 03 	call	0x614	; 0x614 <__floatunsisf>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	5d e3       	ldi	r21, 0x3D	; 61
 446:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
 44a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fixunssfsi>
 44e:	60 b9       	out	0x00, r22	; 0
 450:	86 b7       	in	r24, 0x36	; 54
 452:	84 60       	ori	r24, 0x04	; 4
 454:	86 bf       	out	0x36, r24	; 54
 456:	08 95       	ret

00000458 <TWI_Master_enuStartCond>:
 458:	86 b7       	in	r24, 0x36	; 54
 45a:	80 6a       	ori	r24, 0xA0	; 160
 45c:	86 bf       	out	0x36, r24	; 54
 45e:	06 b6       	in	r0, 0x36	; 54
 460:	07 fe       	sbrs	r0, 7
 462:	fd cf       	rjmp	.-6      	; 0x45e <TWI_Master_enuStartCond+0x6>
 464:	81 b1       	in	r24, 0x01	; 1
 466:	88 7f       	andi	r24, 0xF8	; 248
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	11 f4       	brne	.+4      	; 0x470 <TWI_Master_enuStartCond+0x18>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	08 95       	ret

00000474 <TWI_Master_enuSelectSlave>:
 474:	96 2f       	mov	r25, r22
 476:	68 2f       	mov	r22, r24
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	9b 01       	movw	r18, r22
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	98 9f       	mul	r25, r24
 484:	b0 01       	movw	r22, r0
 486:	11 24       	eor	r1, r1
 488:	62 2b       	or	r22, r18
 48a:	63 b9       	out	0x03, r22	; 3
 48c:	86 b7       	in	r24, 0x36	; 54
 48e:	8f 7d       	andi	r24, 0xDF	; 223
 490:	86 bf       	out	0x36, r24	; 54
 492:	86 b7       	in	r24, 0x36	; 54
 494:	80 68       	ori	r24, 0x80	; 128
 496:	86 bf       	out	0x36, r24	; 54
 498:	06 b6       	in	r0, 0x36	; 54
 49a:	07 fe       	sbrs	r0, 7
 49c:	fd cf       	rjmp	.-6      	; 0x498 <TWI_Master_enuSelectSlave+0x24>
 49e:	81 b1       	in	r24, 0x01	; 1
 4a0:	88 7f       	andi	r24, 0xF8	; 248
 4a2:	08 95       	ret

000004a4 <TWI_Master_enuSendByte>:
 4a4:	83 b9       	out	0x03, r24	; 3
 4a6:	86 b7       	in	r24, 0x36	; 54
 4a8:	84 68       	ori	r24, 0x84	; 132
 4aa:	86 bf       	out	0x36, r24	; 54
 4ac:	06 b6       	in	r0, 0x36	; 54
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <TWI_Master_enuSendByte+0x8>
 4b2:	81 b1       	in	r24, 0x01	; 1
 4b4:	88 7f       	andi	r24, 0xF8	; 248
 4b6:	08 95       	ret

000004b8 <TWI_Master_voidStopCond>:
 *   @brief     - send stop condition
 *   @retval    - None
 */
void TWI_Master_voidStopCond(void)
{
	TWCR |= (1 << 7) | (1<<4);
 4b8:	86 b7       	in	r24, 0x36	; 54
 4ba:	80 69       	ori	r24, 0x90	; 144
 4bc:	86 bf       	out	0x36, r24	; 54
 4be:	08 95       	ret

000004c0 <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	2f 93       	push	r18
 4cc:	3f 93       	push	r19
 4ce:	4f 93       	push	r20
 4d0:	5f 93       	push	r21
 4d2:	6f 93       	push	r22
 4d4:	7f 93       	push	r23
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
 4da:	af 93       	push	r26
 4dc:	bf 93       	push	r27
 4de:	ef 93       	push	r30
 4e0:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
 4e2:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <UART_RXC_CallBack>
 4e6:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <UART_RXC_CallBack+0x1>
 4ea:	30 97       	sbiw	r30, 0x00	; 0
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__vector_13+0x30>
    {
        UART_RXC_CallBack();
 4ee:	09 95       	icall
    }
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
 534:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <UART_UDRE_CallBack>
 538:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <UART_UDRE_CallBack+0x1>
 53c:	30 97       	sbiw	r30, 0x00	; 0
 53e:	09 f0       	breq	.+2      	; 0x542 <__vector_14+0x30>
    {
        UART_UDRE_CallBack();
 540:	09 95       	icall
    }
}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 564:	1f 92       	push	r1
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
 586:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <UART_TXC_CallBack>
 58a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <UART_TXC_CallBack+0x1>
 58e:	30 97       	sbiw	r30, 0x00	; 0
 590:	09 f0       	breq	.+2      	; 0x594 <__vector_15+0x30>
    {
        UART_TXC_CallBack();
 592:	09 95       	icall
    }
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__fixunssfsi>:
 5b6:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_splitA>
 5ba:	88 f0       	brcs	.+34     	; 0x5de <__fixunssfsi+0x28>
 5bc:	9f 57       	subi	r25, 0x7F	; 127
 5be:	98 f0       	brcs	.+38     	; 0x5e6 <__fixunssfsi+0x30>
 5c0:	b9 2f       	mov	r27, r25
 5c2:	99 27       	eor	r25, r25
 5c4:	b7 51       	subi	r27, 0x17	; 23
 5c6:	b0 f0       	brcs	.+44     	; 0x5f4 <__fixunssfsi+0x3e>
 5c8:	e1 f0       	breq	.+56     	; 0x602 <__fixunssfsi+0x4c>
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	1a f0       	brmi	.+6      	; 0x5da <__fixunssfsi+0x24>
 5d4:	ba 95       	dec	r27
 5d6:	c9 f7       	brne	.-14     	; 0x5ca <__fixunssfsi+0x14>
 5d8:	14 c0       	rjmp	.+40     	; 0x602 <__fixunssfsi+0x4c>
 5da:	b1 30       	cpi	r27, 0x01	; 1
 5dc:	91 f0       	breq	.+36     	; 0x602 <__fixunssfsi+0x4c>
 5de:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_zero>
 5e2:	b1 e0       	ldi	r27, 0x01	; 1
 5e4:	08 95       	ret
 5e6:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 5ea:	67 2f       	mov	r22, r23
 5ec:	78 2f       	mov	r23, r24
 5ee:	88 27       	eor	r24, r24
 5f0:	b8 5f       	subi	r27, 0xF8	; 248
 5f2:	39 f0       	breq	.+14     	; 0x602 <__fixunssfsi+0x4c>
 5f4:	b9 3f       	cpi	r27, 0xF9	; 249
 5f6:	cc f3       	brlt	.-14     	; 0x5ea <__fixunssfsi+0x34>
 5f8:	86 95       	lsr	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b3 95       	inc	r27
 600:	d9 f7       	brne	.-10     	; 0x5f8 <__fixunssfsi+0x42>
 602:	3e f4       	brtc	.+14     	; 0x612 <__fixunssfsi+0x5c>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__floatunsisf>:
 614:	e8 94       	clt
 616:	09 c0       	rjmp	.+18     	; 0x62a <__floatsisf+0x12>

00000618 <__floatsisf>:
 618:	97 fb       	bst	r25, 7
 61a:	3e f4       	brtc	.+14     	; 0x62a <__floatsisf+0x12>
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	99 23       	and	r25, r25
 62c:	a9 f0       	breq	.+42     	; 0x658 <__floatsisf+0x40>
 62e:	f9 2f       	mov	r31, r25
 630:	96 e9       	ldi	r25, 0x96	; 150
 632:	bb 27       	eor	r27, r27
 634:	93 95       	inc	r25
 636:	f6 95       	lsr	r31
 638:	87 95       	ror	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f1 11       	cpse	r31, r1
 642:	f8 cf       	rjmp	.-16     	; 0x634 <__floatsisf+0x1c>
 644:	fa f4       	brpl	.+62     	; 0x684 <__floatsisf+0x6c>
 646:	bb 0f       	add	r27, r27
 648:	11 f4       	brne	.+4      	; 0x64e <__floatsisf+0x36>
 64a:	60 ff       	sbrs	r22, 0
 64c:	1b c0       	rjmp	.+54     	; 0x684 <__floatsisf+0x6c>
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	16 c0       	rjmp	.+44     	; 0x684 <__floatsisf+0x6c>
 658:	88 23       	and	r24, r24
 65a:	11 f0       	breq	.+4      	; 0x660 <__floatsisf+0x48>
 65c:	96 e9       	ldi	r25, 0x96	; 150
 65e:	11 c0       	rjmp	.+34     	; 0x682 <__floatsisf+0x6a>
 660:	77 23       	and	r23, r23
 662:	21 f0       	breq	.+8      	; 0x66c <__floatsisf+0x54>
 664:	9e e8       	ldi	r25, 0x8E	; 142
 666:	87 2f       	mov	r24, r23
 668:	76 2f       	mov	r23, r22
 66a:	05 c0       	rjmp	.+10     	; 0x676 <__floatsisf+0x5e>
 66c:	66 23       	and	r22, r22
 66e:	71 f0       	breq	.+28     	; 0x68c <__floatsisf+0x74>
 670:	96 e8       	ldi	r25, 0x86	; 134
 672:	86 2f       	mov	r24, r22
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	2a f0       	brmi	.+10     	; 0x684 <__floatsisf+0x6c>
 67a:	9a 95       	dec	r25
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	da f7       	brpl	.-10     	; 0x67a <__floatsisf+0x62>
 684:	88 0f       	add	r24, r24
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__fp_split3>:
 68e:	57 fd       	sbrc	r21, 7
 690:	90 58       	subi	r25, 0x80	; 128
 692:	44 0f       	add	r20, r20
 694:	55 1f       	adc	r21, r21
 696:	59 f0       	breq	.+22     	; 0x6ae <__fp_splitA+0x10>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	71 f0       	breq	.+28     	; 0x6b8 <__fp_splitA+0x1a>
 69c:	47 95       	ror	r20

0000069e <__fp_splitA>:
 69e:	88 0f       	add	r24, r24
 6a0:	97 fb       	bst	r25, 7
 6a2:	99 1f       	adc	r25, r25
 6a4:	61 f0       	breq	.+24     	; 0x6be <__fp_splitA+0x20>
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <__fp_splitA+0x2a>
 6aa:	87 95       	ror	r24
 6ac:	08 95       	ret
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	14 06       	cpc	r1, r20
 6b4:	55 1f       	adc	r21, r21
 6b6:	f2 cf       	rjmp	.-28     	; 0x69c <__fp_split3+0xe>
 6b8:	46 95       	lsr	r20
 6ba:	f1 df       	rcall	.-30     	; 0x69e <__fp_splitA>
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <__fp_splitA+0x30>
 6be:	16 16       	cp	r1, r22
 6c0:	17 06       	cpc	r1, r23
 6c2:	18 06       	cpc	r1, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	f1 cf       	rjmp	.-30     	; 0x6aa <__fp_splitA+0xc>
 6c8:	86 95       	lsr	r24
 6ca:	71 05       	cpc	r23, r1
 6cc:	61 05       	cpc	r22, r1
 6ce:	08 94       	sec
 6d0:	08 95       	ret

000006d2 <__fp_zero>:
 6d2:	e8 94       	clt

000006d4 <__fp_szero>:
 6d4:	bb 27       	eor	r27, r27
 6d6:	66 27       	eor	r22, r22
 6d8:	77 27       	eor	r23, r23
 6da:	cb 01       	movw	r24, r22
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__mulsf3>:
 6e0:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3x>
 6e4:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_round>
 6e8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscA>
 6ec:	38 f0       	brcs	.+14     	; 0x6fc <__mulsf3+0x1c>
 6ee:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_pscB>
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__mulsf3+0x1c>
 6f4:	95 23       	and	r25, r21
 6f6:	11 f0       	breq	.+4      	; 0x6fc <__mulsf3+0x1c>
 6f8:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_inf>
 6fc:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_nan>
 700:	11 24       	eor	r1, r1
 702:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>

00000706 <__mulsf3x>:
 706:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_split3>
 70a:	70 f3       	brcs	.-36     	; 0x6e8 <__mulsf3+0x8>

0000070c <__mulsf3_pse>:
 70c:	95 9f       	mul	r25, r21
 70e:	c1 f3       	breq	.-16     	; 0x700 <__mulsf3+0x20>
 710:	95 0f       	add	r25, r21
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	55 1f       	adc	r21, r21
 716:	62 9f       	mul	r22, r18
 718:	f0 01       	movw	r30, r0
 71a:	72 9f       	mul	r23, r18
 71c:	bb 27       	eor	r27, r27
 71e:	f0 0d       	add	r31, r0
 720:	b1 1d       	adc	r27, r1
 722:	63 9f       	mul	r22, r19
 724:	aa 27       	eor	r26, r26
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	aa 1f       	adc	r26, r26
 72c:	64 9f       	mul	r22, r20
 72e:	66 27       	eor	r22, r22
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	66 1f       	adc	r22, r22
 736:	82 9f       	mul	r24, r18
 738:	22 27       	eor	r18, r18
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	62 1f       	adc	r22, r18
 740:	73 9f       	mul	r23, r19
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	83 9f       	mul	r24, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	22 1f       	adc	r18, r18
 750:	74 9f       	mul	r23, r20
 752:	33 27       	eor	r19, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	23 1f       	adc	r18, r19
 75a:	84 9f       	mul	r24, r20
 75c:	60 0d       	add	r22, r0
 75e:	21 1d       	adc	r18, r1
 760:	82 2f       	mov	r24, r18
 762:	76 2f       	mov	r23, r22
 764:	6a 2f       	mov	r22, r26
 766:	11 24       	eor	r1, r1
 768:	9f 57       	subi	r25, 0x7F	; 127
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	9a f0       	brmi	.+38     	; 0x794 <__mulsf3_pse+0x88>
 76e:	f1 f0       	breq	.+60     	; 0x7ac <__mulsf3_pse+0xa0>
 770:	88 23       	and	r24, r24
 772:	4a f0       	brmi	.+18     	; 0x786 <__mulsf3_pse+0x7a>
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	bb 1f       	adc	r27, r27
 77a:	66 1f       	adc	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	a9 f7       	brne	.-22     	; 0x770 <__mulsf3_pse+0x64>
 786:	9e 3f       	cpi	r25, 0xFE	; 254
 788:	51 05       	cpc	r21, r1
 78a:	80 f0       	brcs	.+32     	; 0x7ac <__mulsf3_pse+0xa0>
 78c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_inf>
 790:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	e4 f3       	brlt	.-8      	; 0x790 <__mulsf3_pse+0x84>
 798:	98 3e       	cpi	r25, 0xE8	; 232
 79a:	d4 f3       	brlt	.-12     	; 0x790 <__mulsf3_pse+0x84>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	e7 95       	ror	r30
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	c1 f7       	brne	.-16     	; 0x79c <__mulsf3_pse+0x90>
 7ac:	fe 2b       	or	r31, r30
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <__fp_inf>:
 7ba:	97 f9       	bld	r25, 7
 7bc:	9f 67       	ori	r25, 0x7F	; 127
 7be:	80 e8       	ldi	r24, 0x80	; 128
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	08 95       	ret

000007c6 <__fp_nan>:
 7c6:	9f ef       	ldi	r25, 0xFF	; 255
 7c8:	80 ec       	ldi	r24, 0xC0	; 192
 7ca:	08 95       	ret

000007cc <__fp_pscA>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	18 06       	cpc	r1, r24
 7d6:	09 06       	cpc	r0, r25
 7d8:	08 95       	ret

000007da <__fp_pscB>:
 7da:	00 24       	eor	r0, r0
 7dc:	0a 94       	dec	r0
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	14 06       	cpc	r1, r20
 7e4:	05 06       	cpc	r0, r21
 7e6:	08 95       	ret

000007e8 <__fp_round>:
 7e8:	09 2e       	mov	r0, r25
 7ea:	03 94       	inc	r0
 7ec:	00 0c       	add	r0, r0
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <__fp_round+0xc>
 7f0:	88 23       	and	r24, r24
 7f2:	52 f0       	brmi	.+20     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f4:	bb 0f       	add	r27, r27
 7f6:	40 f4       	brcc	.+16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f8:	bf 2b       	or	r27, r31
 7fa:	11 f4       	brne	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	60 ff       	sbrs	r22, 0
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	08 95       	ret

0000080a <__udivmodsi4>:
 80a:	a1 e2       	ldi	r26, 0x21	; 33
 80c:	1a 2e       	mov	r1, r26
 80e:	aa 1b       	sub	r26, r26
 810:	bb 1b       	sub	r27, r27
 812:	fd 01       	movw	r30, r26
 814:	0d c0       	rjmp	.+26     	; 0x830 <__udivmodsi4_ep>

00000816 <__udivmodsi4_loop>:
 816:	aa 1f       	adc	r26, r26
 818:	bb 1f       	adc	r27, r27
 81a:	ee 1f       	adc	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	a2 17       	cp	r26, r18
 820:	b3 07       	cpc	r27, r19
 822:	e4 07       	cpc	r30, r20
 824:	f5 07       	cpc	r31, r21
 826:	20 f0       	brcs	.+8      	; 0x830 <__udivmodsi4_ep>
 828:	a2 1b       	sub	r26, r18
 82a:	b3 0b       	sbc	r27, r19
 82c:	e4 0b       	sbc	r30, r20
 82e:	f5 0b       	sbc	r31, r21

00000830 <__udivmodsi4_ep>:
 830:	66 1f       	adc	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	1a 94       	dec	r1
 83a:	69 f7       	brne	.-38     	; 0x816 <__udivmodsi4_loop>
 83c:	60 95       	com	r22
 83e:	70 95       	com	r23
 840:	80 95       	com	r24
 842:	90 95       	com	r25
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	bd 01       	movw	r22, r26
 84a:	cf 01       	movw	r24, r30
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
