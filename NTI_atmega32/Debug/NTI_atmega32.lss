
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  00800068  00800068  00000b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000297c  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f3  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001776  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000098c  00000000  00000000  0000621c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001295  00000000  00000000  00006ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f45  00000000  00000000  00007e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  00009d82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_1>
   8:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_2>
   c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_10>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
  30:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_12>
  34:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_13>
  38:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_14>
  3c:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_15>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 34       	cpi	r26, 0x46	; 70
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  8a:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	//LCD_DATA_REG = cmd;
	dio_vidWriteChannelGroup(LCD_DATA_REG , cmd , 0xff);
	LCD_lcd_kick();

#endif
}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	9f e0       	ldi	r25, 0x0F	; 15
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_lcd_kick+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_lcd_kick+0x14>
  a6:	00 00       	nop
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_lcd_kick+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_lcd_kick+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <LCD_SendCommand>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	69 e0       	ldi	r22, 0x09	; 9
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  d8:	c4 fb       	bst	r28, 4
  da:	44 27       	eor	r20, r20
  dc:	40 f9       	bld	r20, 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  e6:	c5 fb       	bst	r28, 5
  e8:	44 27       	eor	r20, r20
  ea:	40 f9       	bld	r20, 0
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
  f4:	c6 fb       	bst	r28, 6
  f6:	44 27       	eor	r20, r20
  f8:	40 f9       	bld	r20, 0
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 102:	4c 2f       	mov	r20, r28
 104:	44 1f       	adc	r20, r20
 106:	44 27       	eor	r20, r20
 108:	44 1f       	adc	r20, r20
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 112:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 116:	4c 2f       	mov	r20, r28
 118:	41 70       	andi	r20, 0x01	; 1
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 122:	c1 fb       	bst	r28, 1
 124:	44 27       	eor	r20, r20
 126:	40 f9       	bld	r20, 0
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 130:	c2 fb       	bst	r28, 2
 132:	44 27       	eor	r20, r20
 134:	40 f9       	bld	r20, 0
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 13e:	c3 fb       	bst	r28, 3
 140:	44 27       	eor	r20, r20
 142:	40 f9       	bld	r20, 0
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 a6 01 	call	0x34c	; 0x34c <dio_vidWriteChannel>
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <LCD_Init>:
}

void LCD_Init(void)
{
	/* init Pins as output */
	dio_vidConfigChannel(LCD_CONTROL_REG, LCD_CNT_RS_PIN, OUTPUT);
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_CONTROL_REG, LCD_CNT_E_PIN, OUTPUT);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_CONTROL_REG, LCD_CNT_RW_PIN, OUTPUT);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	69 e0       	ldi	r22, 0x09	; 9
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	
	dio_vidConfigChannel(LCD_DATA_REG, LCD_DATA_PIN_4, OUTPUT);
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_DATA_REG, LCD_DATA_PIN_5, OUTPUT);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_DATA_REG, LCD_DATA_PIN_6, OUTPUT);
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_DATA_REG, LCD_DATA_PIN_7, OUTPUT);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 39 01 	call	0x272	; 0x272 <dio_vidConfigChannel>

	

	/* Send Operation mode*/
	/* Clear the LCD and return home */
	LCD_SendCommand(LCD_CMD_CLEAR_DISPLAY);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_SendCommand>
	LCD_SendCommand(0x02);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_SendCommand>
	LCD_SendCommand(LCD_OP_MODE);
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_SendCommand>
	/* Send entery mode*/
	LCD_SendCommand(LCD_ENTRY_MODE);
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_SendCommand>
	/* Send display mode command*/
	LCD_SendCommand(LCD_DISPLAY_MODE);
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_SendCommand>
 1b8:	08 95       	ret

000001ba <main>:

#if 1
volatile u8 d ='A'  ;

int main()
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	1f 92       	push	r1
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	u8 data='Z';
 1c4:	8a e5       	ldi	r24, 0x5A	; 90
 1c6:	89 83       	std	Y+1, r24	; 0x01
   
	TWI_Master_voidInit(40000);
 1c8:	60 e4       	ldi	r22, 0x40	; 64
 1ca:	7c e9       	ldi	r23, 0x9C	; 156
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 01 03 	call	0x602	; 0x602 <TWI_Master_voidInit>
	UART_Init();
 1d4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <UART_Init>
	LCD_Init();
 1d8:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Init>
		
    while (1) 
    {
		TWI_enuStartCond();
 1dc:	0e 94 23 03 	call	0x646	; 0x646 <TWI_enuStartCond>
		TWI_enuSelectSlave(0x10,READ_OP);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	0e 94 31 03 	call	0x662	; 0x662 <TWI_enuSelectSlave>
		TWI_enuReceiveByte(&data,ACK);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 3f 03 	call	0x67e	; 0x67e <TWI_enuReceiveByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	83 ed       	ldi	r24, 0xD3	; 211
 1f6:	90 e3       	ldi	r25, 0x30	; 48
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x3e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x48>
 202:	00 00       	nop
		 
		 
		 _delay_ms(1000);
		 
		 UART_TransmitBusyWait(data);
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <UART_TransmitBusyWait>
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	83 ed       	ldi	r24, 0xD3	; 211
 210:	90 e3       	ldi	r25, 0x30	; 48
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x58>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x62>
 21c:	00 00       	nop
 21e:	de cf       	rjmp	.-68     	; 0x1dc <main+0x22>

00000220 <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
 242:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GP_ADC_Callback>
 246:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GP_ADC_Callback+0x1>
 24a:	30 97       	sbiw	r30, 0x00	; 0
 24c:	09 f0       	breq	.+2      	; 0x250 <__vector_16+0x30>
	{
		GP_ADC_Callback();
 24e:	09 95       	icall
	}
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	01 f1       	breq	.+64     	; 0x2b6 <dio_vidConfigChannel+0x44>
 276:	30 f0       	brcs	.+12     	; 0x284 <dio_vidConfigChannel+0x12>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	b1 f1       	breq	.+108    	; 0x2e8 <dio_vidConfigChannel+0x76>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	09 f4       	brne	.+2      	; 0x282 <dio_vidConfigChannel+0x10>
 280:	4c c0       	rjmp	.+152    	; 0x31a <dio_vidConfigChannel+0xa8>
 282:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	59 f4       	brne	.+22     	; 0x29e <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DDRA,channel);
 288:	2a b3       	in	r18, 0x1a	; 26
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <dio_vidConfigChannel+0x22>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <dio_vidConfigChannel+0x1e>
 298:	82 2b       	or	r24, r18
 29a:	8a bb       	out	0x1a, r24	; 26
 29c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRA,channel);
 29e:	2a b3       	in	r18, 0x1a	; 26
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <dio_vidConfigChannel+0x38>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <dio_vidConfigChannel+0x34>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	8a bb       	out	0x1a, r24	; 26
 2b4:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DDRB,channel);
 2ba:	27 b3       	in	r18, 0x17	; 23
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <dio_vidConfigChannel+0x54>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <dio_vidConfigChannel+0x50>
 2ca:	82 2b       	or	r24, r18
 2cc:	87 bb       	out	0x17, r24	; 23
 2ce:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRB,channel);
 2d0:	27 b3       	in	r18, 0x17	; 23
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <dio_vidConfigChannel+0x6a>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <dio_vidConfigChannel+0x66>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	87 bb       	out	0x17, r24	; 23
 2e6:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	59 f4       	brne	.+22     	; 0x302 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DDRC,channel);
 2ec:	24 b3       	in	r18, 0x14	; 20
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <dio_vidConfigChannel+0x86>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <dio_vidConfigChannel+0x82>
 2fc:	82 2b       	or	r24, r18
 2fe:	84 bb       	out	0x14, r24	; 20
 300:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRC,channel);
 302:	24 b3       	in	r18, 0x14	; 20
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <dio_vidConfigChannel+0x9c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <dio_vidConfigChannel+0x98>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	84 bb       	out	0x14, r24	; 20
 318:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	59 f4       	brne	.+22     	; 0x334 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DDRD,channel);
 31e:	21 b3       	in	r18, 0x11	; 17
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <dio_vidConfigChannel+0xb8>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <dio_vidConfigChannel+0xb4>
 32e:	82 2b       	or	r24, r18
 330:	81 bb       	out	0x11, r24	; 17
 332:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRD,channel);
 334:	21 b3       	in	r18, 0x11	; 17
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <dio_vidConfigChannel+0xce>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <dio_vidConfigChannel+0xca>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	81 bb       	out	0x11, r24	; 17
 34a:	08 95       	ret

0000034c <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	01 f1       	breq	.+64     	; 0x390 <dio_vidWriteChannel+0x44>
 350:	30 f0       	brcs	.+12     	; 0x35e <dio_vidWriteChannel+0x12>
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	b1 f1       	breq	.+108    	; 0x3c2 <dio_vidWriteChannel+0x76>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	09 f4       	brne	.+2      	; 0x35c <dio_vidWriteChannel+0x10>
 35a:	4c c0       	rjmp	.+152    	; 0x3f4 <dio_vidWriteChannel+0xa8>
 35c:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 35e:	41 11       	cpse	r20, r1
 360:	0c c0       	rjmp	.+24     	; 0x37a <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(PORTA,channel);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <dio_vidWriteChannel+0x22>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <dio_vidWriteChannel+0x1e>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8b bb       	out	0x1b, r24	; 27
 378:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTA,channel);
 37a:	2b b3       	in	r18, 0x1b	; 27
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <dio_vidWriteChannel+0x3a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <dio_vidWriteChannel+0x36>
 38a:	82 2b       	or	r24, r18
 38c:	8b bb       	out	0x1b, r24	; 27
 38e:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 390:	41 11       	cpse	r20, r1
 392:	0c c0       	rjmp	.+24     	; 0x3ac <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(PORTB,channel);
 394:	28 b3       	in	r18, 0x18	; 24
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <dio_vidWriteChannel+0x54>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <dio_vidWriteChannel+0x50>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	88 bb       	out	0x18, r24	; 24
 3aa:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTB,channel);
 3ac:	28 b3       	in	r18, 0x18	; 24
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_vidWriteChannel+0x6c>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_vidWriteChannel+0x68>
 3bc:	82 2b       	or	r24, r18
 3be:	88 bb       	out	0x18, r24	; 24
 3c0:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 3c2:	41 11       	cpse	r20, r1
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(PORTC,channel);
 3c6:	25 b3       	in	r18, 0x15	; 21
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <dio_vidWriteChannel+0x86>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <dio_vidWriteChannel+0x82>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	85 bb       	out	0x15, r24	; 21
 3dc:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTC,channel);
 3de:	25 b3       	in	r18, 0x15	; 21
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <dio_vidWriteChannel+0x9e>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <dio_vidWriteChannel+0x9a>
 3ee:	82 2b       	or	r24, r18
 3f0:	85 bb       	out	0x15, r24	; 21
 3f2:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 3f4:	41 11       	cpse	r20, r1
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{
			CLEAR_BIT(PORTD,channel);
 3f8:	22 b3       	in	r18, 0x12	; 18
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	82 bb       	out	0x12, r24	; 18
 40e:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTD,channel);
 410:	22 b3       	in	r18, 0x12	; 18
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	82 bb       	out	0x12, r24	; 18
 424:	08 95       	ret

00000426 <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	EXTI0_callback();
 448:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <EXTI0_callback>
 44c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <EXTI0_callback+0x1>
 450:	09 95       	icall
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_2>:

void __vector_2(void)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	EXTI1_callback();
 496:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <EXTI1_callback>
 49a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <EXTI1_callback+0x1>
 49e:	09 95       	icall
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_3>:

void __vector_3(void)
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	EXTI2_callback();
 4e4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <EXTI2_callback>
 4e8:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <EXTI2_callback+0x1>
 4ec:	09 95       	icall
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
 532:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 536:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 53a:	09 95       	icall
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_10>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
 580:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <T0_OC_CallBackFun>
 584:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <T0_OC_CallBackFun+0x1>
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	09 f0       	breq	.+2      	; 0x58e <__vector_10+0x30>
 58c:	09 95       	icall
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
 5d2:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <T0_OVF_CallBackFun>
 5d6:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <T0_OVF_CallBackFun+0x1>
 5da:	30 97       	sbiw	r30, 0x00	; 0
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
 5de:	09 95       	icall
    }
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <TWI_Master_voidInit>:
	
	
	return READ_TWI_EVENT_STATE();

	
}
 602:	9b 01       	movw	r18, r22
 604:	ac 01       	movw	r20, r24
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	81 b9       	out	0x01, r24	; 1
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	74 e2       	ldi	r23, 0x24	; 36
 60e:	84 ef       	ldi	r24, 0xF4	; 244
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 2a 05 	call	0xa54	; 0xa54 <__udivmodsi4>
 616:	ca 01       	movw	r24, r20
 618:	b9 01       	movw	r22, r18
 61a:	60 51       	subi	r22, 0x10	; 16
 61c:	71 09       	sbc	r23, r1
 61e:	81 09       	sbc	r24, r1
 620:	91 09       	sbc	r25, r1
 622:	0e 94 2f 04 	call	0x85e	; 0x85e <__floatunsisf>
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	5d e3       	ldi	r21, 0x3D	; 61
 62e:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 632:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 636:	60 b9       	out	0x00, r22	; 0
 638:	86 b7       	in	r24, 0x36	; 54
 63a:	80 64       	ori	r24, 0x40	; 64
 63c:	86 bf       	out	0x36, r24	; 54
 63e:	86 b7       	in	r24, 0x36	; 54
 640:	84 60       	ori	r24, 0x04	; 4
 642:	86 bf       	out	0x36, r24	; 54
 644:	08 95       	ret

00000646 <TWI_enuStartCond>:
 646:	86 b7       	in	r24, 0x36	; 54
 648:	80 6a       	ori	r24, 0xA0	; 160
 64a:	86 bf       	out	0x36, r24	; 54
 64c:	06 b6       	in	r0, 0x36	; 54
 64e:	07 fe       	sbrs	r0, 7
 650:	fd cf       	rjmp	.-6      	; 0x64c <TWI_enuStartCond+0x6>
 652:	81 b1       	in	r24, 0x01	; 1
 654:	88 7f       	andi	r24, 0xF8	; 248
 656:	88 30       	cpi	r24, 0x08	; 8
 658:	11 f4       	brne	.+4      	; 0x65e <TWI_enuStartCond+0x18>
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret

00000662 <TWI_enuSelectSlave>:
 662:	86 2b       	or	r24, r22
 664:	83 b9       	out	0x03, r24	; 3
 666:	86 b7       	in	r24, 0x36	; 54
 668:	8f 7d       	andi	r24, 0xDF	; 223
 66a:	86 bf       	out	0x36, r24	; 54
 66c:	86 b7       	in	r24, 0x36	; 54
 66e:	80 68       	ori	r24, 0x80	; 128
 670:	86 bf       	out	0x36, r24	; 54
 672:	06 b6       	in	r0, 0x36	; 54
 674:	07 fe       	sbrs	r0, 7
 676:	fd cf       	rjmp	.-6      	; 0x672 <TWI_enuSelectSlave+0x10>
 678:	81 b1       	in	r24, 0x01	; 1
 67a:	88 7f       	andi	r24, 0xF8	; 248
 67c:	08 95       	ret

0000067e <TWI_enuReceiveByte>:
 *	 @param [Out] CopyofData  -> 8 bit data
 *   @brief     - Receive data then send ACK or NACK
 *   @retval    - Status of send SLA + RW according to twi status register
 */
TWI_ERROR_t TWI_enuReceiveByte(u8 *CopyofData, TWI_ACK_t ack)
{
 67e:	fc 01       	movw	r30, r24
	
	/* turn off flag  & Enable/Disable ACK/NACK condition */
	CLEAR_BIT(TWCR,6);
 680:	26 b7       	in	r18, 0x36	; 54
 682:	2f 7b       	andi	r18, 0xBF	; 191
 684:	26 bf       	out	0x36, r18	; 54
	TWCR |= (1 << 7)|(ack << 6);
 686:	86 b7       	in	r24, 0x36	; 54
 688:	90 e4       	ldi	r25, 0x40	; 64
 68a:	69 9f       	mul	r22, r25
 68c:	b0 01       	movw	r22, r0
 68e:	11 24       	eor	r1, r1
 690:	68 2b       	or	r22, r24
 692:	60 68       	ori	r22, 0x80	; 128
 694:	66 bf       	out	0x36, r22	; 54
	/* Busy wait until TWINT is set */
	while (!CHECK_BIT(TWCR, 7));
 696:	06 b6       	in	r0, 0x36	; 54
 698:	07 fe       	sbrs	r0, 7
 69a:	fd cf       	rjmp	.-6      	; 0x696 <TWI_enuReceiveByte+0x18>
	    *CopyofData = TWDR;
 69c:	83 b1       	in	r24, 0x03	; 3
 69e:	80 83       	st	Z, r24
	    
	return READ_TWI_EVENT_STATE();
 6a0:	81 b1       	in	r24, 0x01	; 1
	
	
}
 6a2:	88 7f       	andi	r24, 0xF8	; 248
 6a4:	08 95       	ret

000006a6 <UART_Init>:
void UART_UDRE_IEN(void (*callbackfun)())
{
    // enable UDRE
    SET_BIT(UCSRB, 5);
    // Set callback function
    UART_UDRE_CallBack = callbackfun;
 6a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 6aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 6ae:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 6b2:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	aa 1f       	adc	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	9c 01       	movw	r18, r24
 6c8:	ad 01       	movw	r20, r26
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	44 1f       	adc	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	44 1f       	adc	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	74 e2       	ldi	r23, 0x24	; 36
 6de:	84 ef       	ldi	r24, 0xF4	; 244
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 2a 05 	call	0xa54	; 0xa54 <__udivmodsi4>
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	29 b9       	out	0x09, r18	; 9
 6ea:	10 bc       	out	0x20, r1	; 32
 6ec:	88 e1       	ldi	r24, 0x18	; 24
 6ee:	8a b9       	out	0x0a, r24	; 10
 6f0:	8e e8       	ldi	r24, 0x8E	; 142
 6f2:	80 bd       	out	0x20, r24	; 32
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret

000006f8 <UART_TransmitBusyWait>:
 6f8:	5d 9b       	sbis	0x0b, 5	; 11
 6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <UART_TransmitBusyWait>
 6fc:	2a b1       	in	r18, 0x0a	; 10
 6fe:	91 70       	andi	r25, 0x01	; 1
 700:	92 2b       	or	r25, r18
 702:	9a b9       	out	0x0a, r25	; 10
 704:	8c b9       	out	0x0c, r24	; 12
 706:	85 e0       	ldi	r24, 0x05	; 5
 708:	08 95       	ret

0000070a <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
 72c:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RXC_CallBack>
 730:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <UART_RXC_CallBack+0x1>
 734:	30 97       	sbiw	r30, 0x00	; 0
 736:	09 f0       	breq	.+2      	; 0x73a <__vector_13+0x30>
    {
        UART_RXC_CallBack();
 738:	09 95       	icall
    }
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 75c:	1f 92       	push	r1
 75e:	0f 92       	push	r0
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
 766:	2f 93       	push	r18
 768:	3f 93       	push	r19
 76a:	4f 93       	push	r20
 76c:	5f 93       	push	r21
 76e:	6f 93       	push	r22
 770:	7f 93       	push	r23
 772:	8f 93       	push	r24
 774:	9f 93       	push	r25
 776:	af 93       	push	r26
 778:	bf 93       	push	r27
 77a:	ef 93       	push	r30
 77c:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
 77e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <UART_UDRE_CallBack>
 782:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <UART_UDRE_CallBack+0x1>
 786:	30 97       	sbiw	r30, 0x00	; 0
 788:	09 f0       	breq	.+2      	; 0x78c <__vector_14+0x30>
    {
        UART_UDRE_CallBack();
 78a:	09 95       	icall
    }
}
 78c:	ff 91       	pop	r31
 78e:	ef 91       	pop	r30
 790:	bf 91       	pop	r27
 792:	af 91       	pop	r26
 794:	9f 91       	pop	r25
 796:	8f 91       	pop	r24
 798:	7f 91       	pop	r23
 79a:	6f 91       	pop	r22
 79c:	5f 91       	pop	r21
 79e:	4f 91       	pop	r20
 7a0:	3f 91       	pop	r19
 7a2:	2f 91       	pop	r18
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 7ae:	1f 92       	push	r1
 7b0:	0f 92       	push	r0
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	0f 92       	push	r0
 7b6:	11 24       	eor	r1, r1
 7b8:	2f 93       	push	r18
 7ba:	3f 93       	push	r19
 7bc:	4f 93       	push	r20
 7be:	5f 93       	push	r21
 7c0:	6f 93       	push	r22
 7c2:	7f 93       	push	r23
 7c4:	8f 93       	push	r24
 7c6:	9f 93       	push	r25
 7c8:	af 93       	push	r26
 7ca:	bf 93       	push	r27
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
 7d0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <UART_TXC_CallBack>
 7d4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <UART_TXC_CallBack+0x1>
 7d8:	30 97       	sbiw	r30, 0x00	; 0
 7da:	09 f0       	breq	.+2      	; 0x7de <__vector_15+0x30>
    {
        UART_TXC_CallBack();
 7dc:	09 95       	icall
    }
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	bf 91       	pop	r27
 7e4:	af 91       	pop	r26
 7e6:	9f 91       	pop	r25
 7e8:	8f 91       	pop	r24
 7ea:	7f 91       	pop	r23
 7ec:	6f 91       	pop	r22
 7ee:	5f 91       	pop	r21
 7f0:	4f 91       	pop	r20
 7f2:	3f 91       	pop	r19
 7f4:	2f 91       	pop	r18
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <__fixunssfsi>:
 800:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_splitA>
 804:	88 f0       	brcs	.+34     	; 0x828 <__fixunssfsi+0x28>
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	98 f0       	brcs	.+38     	; 0x830 <__fixunssfsi+0x30>
 80a:	b9 2f       	mov	r27, r25
 80c:	99 27       	eor	r25, r25
 80e:	b7 51       	subi	r27, 0x17	; 23
 810:	b0 f0       	brcs	.+44     	; 0x83e <__fixunssfsi+0x3e>
 812:	e1 f0       	breq	.+56     	; 0x84c <__fixunssfsi+0x4c>
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	1a f0       	brmi	.+6      	; 0x824 <__fixunssfsi+0x24>
 81e:	ba 95       	dec	r27
 820:	c9 f7       	brne	.-14     	; 0x814 <__fixunssfsi+0x14>
 822:	14 c0       	rjmp	.+40     	; 0x84c <__fixunssfsi+0x4c>
 824:	b1 30       	cpi	r27, 0x01	; 1
 826:	91 f0       	breq	.+36     	; 0x84c <__fixunssfsi+0x4c>
 828:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_zero>
 82c:	b1 e0       	ldi	r27, 0x01	; 1
 82e:	08 95       	ret
 830:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_zero>
 834:	67 2f       	mov	r22, r23
 836:	78 2f       	mov	r23, r24
 838:	88 27       	eor	r24, r24
 83a:	b8 5f       	subi	r27, 0xF8	; 248
 83c:	39 f0       	breq	.+14     	; 0x84c <__fixunssfsi+0x4c>
 83e:	b9 3f       	cpi	r27, 0xF9	; 249
 840:	cc f3       	brlt	.-14     	; 0x834 <__fixunssfsi+0x34>
 842:	86 95       	lsr	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b3 95       	inc	r27
 84a:	d9 f7       	brne	.-10     	; 0x842 <__fixunssfsi+0x42>
 84c:	3e f4       	brtc	.+14     	; 0x85c <__fixunssfsi+0x5c>
 84e:	90 95       	com	r25
 850:	80 95       	com	r24
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <__floatunsisf>:
 85e:	e8 94       	clt
 860:	09 c0       	rjmp	.+18     	; 0x874 <__floatsisf+0x12>

00000862 <__floatsisf>:
 862:	97 fb       	bst	r25, 7
 864:	3e f4       	brtc	.+14     	; 0x874 <__floatsisf+0x12>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	99 23       	and	r25, r25
 876:	a9 f0       	breq	.+42     	; 0x8a2 <__floatsisf+0x40>
 878:	f9 2f       	mov	r31, r25
 87a:	96 e9       	ldi	r25, 0x96	; 150
 87c:	bb 27       	eor	r27, r27
 87e:	93 95       	inc	r25
 880:	f6 95       	lsr	r31
 882:	87 95       	ror	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f1 11       	cpse	r31, r1
 88c:	f8 cf       	rjmp	.-16     	; 0x87e <__floatsisf+0x1c>
 88e:	fa f4       	brpl	.+62     	; 0x8ce <__floatsisf+0x6c>
 890:	bb 0f       	add	r27, r27
 892:	11 f4       	brne	.+4      	; 0x898 <__floatsisf+0x36>
 894:	60 ff       	sbrs	r22, 0
 896:	1b c0       	rjmp	.+54     	; 0x8ce <__floatsisf+0x6c>
 898:	6f 5f       	subi	r22, 0xFF	; 255
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <__floatsisf+0x6c>
 8a2:	88 23       	and	r24, r24
 8a4:	11 f0       	breq	.+4      	; 0x8aa <__floatsisf+0x48>
 8a6:	96 e9       	ldi	r25, 0x96	; 150
 8a8:	11 c0       	rjmp	.+34     	; 0x8cc <__floatsisf+0x6a>
 8aa:	77 23       	and	r23, r23
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <__floatsisf+0x54>
 8ae:	9e e8       	ldi	r25, 0x8E	; 142
 8b0:	87 2f       	mov	r24, r23
 8b2:	76 2f       	mov	r23, r22
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__floatsisf+0x5e>
 8b6:	66 23       	and	r22, r22
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__floatsisf+0x74>
 8ba:	96 e8       	ldi	r25, 0x86	; 134
 8bc:	86 2f       	mov	r24, r22
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	2a f0       	brmi	.+10     	; 0x8ce <__floatsisf+0x6c>
 8c4:	9a 95       	dec	r25
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	da f7       	brpl	.-10     	; 0x8c4 <__floatsisf+0x62>
 8ce:	88 0f       	add	r24, r24
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret

000008d8 <__fp_split3>:
 8d8:	57 fd       	sbrc	r21, 7
 8da:	90 58       	subi	r25, 0x80	; 128
 8dc:	44 0f       	add	r20, r20
 8de:	55 1f       	adc	r21, r21
 8e0:	59 f0       	breq	.+22     	; 0x8f8 <__fp_splitA+0x10>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	71 f0       	breq	.+28     	; 0x902 <__fp_splitA+0x1a>
 8e6:	47 95       	ror	r20

000008e8 <__fp_splitA>:
 8e8:	88 0f       	add	r24, r24
 8ea:	97 fb       	bst	r25, 7
 8ec:	99 1f       	adc	r25, r25
 8ee:	61 f0       	breq	.+24     	; 0x908 <__fp_splitA+0x20>
 8f0:	9f 3f       	cpi	r25, 0xFF	; 255
 8f2:	79 f0       	breq	.+30     	; 0x912 <__fp_splitA+0x2a>
 8f4:	87 95       	ror	r24
 8f6:	08 95       	ret
 8f8:	12 16       	cp	r1, r18
 8fa:	13 06       	cpc	r1, r19
 8fc:	14 06       	cpc	r1, r20
 8fe:	55 1f       	adc	r21, r21
 900:	f2 cf       	rjmp	.-28     	; 0x8e6 <__fp_split3+0xe>
 902:	46 95       	lsr	r20
 904:	f1 df       	rcall	.-30     	; 0x8e8 <__fp_splitA>
 906:	08 c0       	rjmp	.+16     	; 0x918 <__fp_splitA+0x30>
 908:	16 16       	cp	r1, r22
 90a:	17 06       	cpc	r1, r23
 90c:	18 06       	cpc	r1, r24
 90e:	99 1f       	adc	r25, r25
 910:	f1 cf       	rjmp	.-30     	; 0x8f4 <__fp_splitA+0xc>
 912:	86 95       	lsr	r24
 914:	71 05       	cpc	r23, r1
 916:	61 05       	cpc	r22, r1
 918:	08 94       	sec
 91a:	08 95       	ret

0000091c <__fp_zero>:
 91c:	e8 94       	clt

0000091e <__fp_szero>:
 91e:	bb 27       	eor	r27, r27
 920:	66 27       	eor	r22, r22
 922:	77 27       	eor	r23, r23
 924:	cb 01       	movw	r24, r22
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__mulsf3>:
 92a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3x>
 92e:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_round>
 932:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscA>
 936:	38 f0       	brcs	.+14     	; 0x946 <__mulsf3+0x1c>
 938:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_pscB>
 93c:	20 f0       	brcs	.+8      	; 0x946 <__mulsf3+0x1c>
 93e:	95 23       	and	r25, r21
 940:	11 f0       	breq	.+4      	; 0x946 <__mulsf3+0x1c>
 942:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 946:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_nan>
 94a:	11 24       	eor	r1, r1
 94c:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>

00000950 <__mulsf3x>:
 950:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_split3>
 954:	70 f3       	brcs	.-36     	; 0x932 <__mulsf3+0x8>

00000956 <__mulsf3_pse>:
 956:	95 9f       	mul	r25, r21
 958:	c1 f3       	breq	.-16     	; 0x94a <__mulsf3+0x20>
 95a:	95 0f       	add	r25, r21
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	55 1f       	adc	r21, r21
 960:	62 9f       	mul	r22, r18
 962:	f0 01       	movw	r30, r0
 964:	72 9f       	mul	r23, r18
 966:	bb 27       	eor	r27, r27
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	63 9f       	mul	r22, r19
 96e:	aa 27       	eor	r26, r26
 970:	f0 0d       	add	r31, r0
 972:	b1 1d       	adc	r27, r1
 974:	aa 1f       	adc	r26, r26
 976:	64 9f       	mul	r22, r20
 978:	66 27       	eor	r22, r22
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	66 1f       	adc	r22, r22
 980:	82 9f       	mul	r24, r18
 982:	22 27       	eor	r18, r18
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	73 9f       	mul	r23, r19
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	62 1f       	adc	r22, r18
 992:	83 9f       	mul	r24, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	22 1f       	adc	r18, r18
 99a:	74 9f       	mul	r23, r20
 99c:	33 27       	eor	r19, r19
 99e:	a0 0d       	add	r26, r0
 9a0:	61 1d       	adc	r22, r1
 9a2:	23 1f       	adc	r18, r19
 9a4:	84 9f       	mul	r24, r20
 9a6:	60 0d       	add	r22, r0
 9a8:	21 1d       	adc	r18, r1
 9aa:	82 2f       	mov	r24, r18
 9ac:	76 2f       	mov	r23, r22
 9ae:	6a 2f       	mov	r22, r26
 9b0:	11 24       	eor	r1, r1
 9b2:	9f 57       	subi	r25, 0x7F	; 127
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	9a f0       	brmi	.+38     	; 0x9de <__mulsf3_pse+0x88>
 9b8:	f1 f0       	breq	.+60     	; 0x9f6 <__mulsf3_pse+0xa0>
 9ba:	88 23       	and	r24, r24
 9bc:	4a f0       	brmi	.+18     	; 0x9d0 <__mulsf3_pse+0x7a>
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__mulsf3_pse+0x64>
 9d0:	9e 3f       	cpi	r25, 0xFE	; 254
 9d2:	51 05       	cpc	r21, r1
 9d4:	80 f0       	brcs	.+32     	; 0x9f6 <__mulsf3_pse+0xa0>
 9d6:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 9da:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	e4 f3       	brlt	.-8      	; 0x9da <__mulsf3_pse+0x84>
 9e2:	98 3e       	cpi	r25, 0xE8	; 232
 9e4:	d4 f3       	brlt	.-12     	; 0x9da <__mulsf3_pse+0x84>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	e7 95       	ror	r30
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	c1 f7       	brne	.-16     	; 0x9e6 <__mulsf3_pse+0x90>
 9f6:	fe 2b       	or	r31, r30
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <__fp_inf>:
 a04:	97 f9       	bld	r25, 7
 a06:	9f 67       	ori	r25, 0x7F	; 127
 a08:	80 e8       	ldi	r24, 0x80	; 128
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	08 95       	ret

00000a10 <__fp_nan>:
 a10:	9f ef       	ldi	r25, 0xFF	; 255
 a12:	80 ec       	ldi	r24, 0xC0	; 192
 a14:	08 95       	ret

00000a16 <__fp_pscA>:
 a16:	00 24       	eor	r0, r0
 a18:	0a 94       	dec	r0
 a1a:	16 16       	cp	r1, r22
 a1c:	17 06       	cpc	r1, r23
 a1e:	18 06       	cpc	r1, r24
 a20:	09 06       	cpc	r0, r25
 a22:	08 95       	ret

00000a24 <__fp_pscB>:
 a24:	00 24       	eor	r0, r0
 a26:	0a 94       	dec	r0
 a28:	12 16       	cp	r1, r18
 a2a:	13 06       	cpc	r1, r19
 a2c:	14 06       	cpc	r1, r20
 a2e:	05 06       	cpc	r0, r21
 a30:	08 95       	ret

00000a32 <__fp_round>:
 a32:	09 2e       	mov	r0, r25
 a34:	03 94       	inc	r0
 a36:	00 0c       	add	r0, r0
 a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0xc>
 a3a:	88 23       	and	r24, r24
 a3c:	52 f0       	brmi	.+20     	; 0xa52 <__fp_round+0x20>
 a3e:	bb 0f       	add	r27, r27
 a40:	40 f4       	brcc	.+16     	; 0xa52 <__fp_round+0x20>
 a42:	bf 2b       	or	r27, r31
 a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0x18>
 a46:	60 ff       	sbrs	r22, 0
 a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fp_round+0x20>
 a4a:	6f 5f       	subi	r22, 0xFF	; 255
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	08 95       	ret

00000a54 <__udivmodsi4>:
 a54:	a1 e2       	ldi	r26, 0x21	; 33
 a56:	1a 2e       	mov	r1, r26
 a58:	aa 1b       	sub	r26, r26
 a5a:	bb 1b       	sub	r27, r27
 a5c:	fd 01       	movw	r30, r26
 a5e:	0d c0       	rjmp	.+26     	; 0xa7a <__udivmodsi4_ep>

00000a60 <__udivmodsi4_loop>:
 a60:	aa 1f       	adc	r26, r26
 a62:	bb 1f       	adc	r27, r27
 a64:	ee 1f       	adc	r30, r30
 a66:	ff 1f       	adc	r31, r31
 a68:	a2 17       	cp	r26, r18
 a6a:	b3 07       	cpc	r27, r19
 a6c:	e4 07       	cpc	r30, r20
 a6e:	f5 07       	cpc	r31, r21
 a70:	20 f0       	brcs	.+8      	; 0xa7a <__udivmodsi4_ep>
 a72:	a2 1b       	sub	r26, r18
 a74:	b3 0b       	sbc	r27, r19
 a76:	e4 0b       	sbc	r30, r20
 a78:	f5 0b       	sbc	r31, r21

00000a7a <__udivmodsi4_ep>:
 a7a:	66 1f       	adc	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	1a 94       	dec	r1
 a84:	69 f7       	brne	.-38     	; 0xa60 <__udivmodsi4_loop>
 a86:	60 95       	com	r22
 a88:	70 95       	com	r23
 a8a:	80 95       	com	r24
 a8c:	90 95       	com	r25
 a8e:	9b 01       	movw	r18, r22
 a90:	ac 01       	movw	r20, r24
 a92:	bd 01       	movw	r22, r26
 a94:	cf 01       	movw	r24, r30
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
